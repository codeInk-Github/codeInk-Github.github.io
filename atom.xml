<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codeInk寇墨</title>
  
  
  <link href="http://codeink-github.github.io/atom.xml" rel="self"/>
  
  <link href="http://codeink-github.github.io/"/>
  <updated>2022-03-17T14:13:17.831Z</updated>
  <id>http://codeink-github.github.io/</id>
  
  <author>
    <name>codeInk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序猿基础知识之Java篇</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BJava%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BJava%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:13:17.831Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之Java篇"><a href="#程序猿基础知识之Java篇" class="headerlink" title="程序猿基础知识之Java篇"></a>程序猿基础知识之Java篇</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><ul><li>循环队列</li></ul><h5 id="树"><a href="#树" class="headerlink" title="树"></a>树</h5><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><ul><li>性质<ul><li>叶节点数为 $n_0$ ,  而度数为2的节点总数为$n_2$  . 则 $n_0 &#x3D; n_2 +1$</li><li>在非空二叉树中,   第 i 层的节点总数不超过  $2^{i-1}   (i \ge 1) $</li><li></li></ul></li></ul><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><p><strong>抽象类</strong></p><p>  在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>  抽象类除了**&#x3D;&#x3D;不能实例化对象&#x3D;&#x3D;**之外，类的其他功能依然存在，成员变量、成员方法呵呵构造方法的访问方式和普通类一样。</p><p>  &#x3D;&#x3D;由于抽象类不能实例化，所以抽象类必须被继承，才能被使用&#x3D;&#x3D;，也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</p><p>  父类包含了子类集合的常见方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p><p>  在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口</p><p>抽象方法：</p><p>  抽象方法没有定义，方法名之后直接跟一个分号，而不是花括号。</p><p><strong>接口：</strong></p><p><strong>接口与抽象类联系与不同</strong></p><p>相同点：</p><ul><li>都不能被实例化</li><li><strong>接口的实现类</strong>和<strong>抽象类的子类</strong> 都只有实现了接口或抽象类中的方法后才能实例化：</li></ul><p>不同点：</p><table><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>方法实现</td><td>只有方法的定义，不能有方法的实现。jdk1.8中可以定义default方法体</td><td>可以有方法的实现</td></tr><tr><td>关键字</td><td>实现接口的关键字为implements</td><td>继承的关键词为extends</td></tr><tr><td>实现与继承</td><td>一个类可以实现多个接口，可以间接的实现多重继承</td><td>一个类只能继承一个抽象类</td></tr><tr><td>强调</td><td>强调特定功能的实现</td><td>强调所属关系</td></tr><tr><td>成员变量</td><td>默认为static final ，必须赋初值，不能被修改；</td><td>默认为default，可在子类中被重新定义，也可被重新赋值</td></tr><tr><td>成员方法</td><td>默认为public、abstract</td><td>抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号接口</td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><ul><li>volatile 关键字<br> - 能保证线程安全</li></ul><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203121350047.png" alt="image-20220312135000972" style="zoom:67%;" /><p>​         Java 集合框架主要包括两种类型的容器，一种是集合(Collection)， 存储着一个元素集合，另一种是图(Map) ，存储键值对。</p><p>所有的集合框架都包含如下内容：</p><ul><li><p><strong>接口</strong></p><ul><li>Collection</li><li>List</li><li>Set</li><li>SortedSet</li><li>Map</li><li>Map.Entry</li><li>SortedMap</li><li>Enumeration</li></ul></li><li><p><strong>实现(类)</strong>   – 常见的</p><ul><li>LinkedList</li><li>ArrayList</li><li>HashSet</li><li>TreeSet</li><li>HashMap</li></ul></li><li><p><strong>算法</strong></p></li></ul><h4 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator ( 迭代器 )"></a>Iterator ( 迭代器 )</h4><p>Iterator 不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList和HashSet等集合。</p><ul><li><p>接口 Iterator<E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasNext(): <span class="type">boolean</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span>: E</span><br><span class="line"><span class="title function_">remove</span><span class="params">()</span>: <span class="keyword">void</span></span><br><span class="line"><span class="title function_">forEachRemaining</span><span class="params">( Consumer&lt;?<span class="built_in">super</span> E?&gt;)</span> :<span class="keyword">void</span></span><br></pre></td></tr></table></figure></li><li><p>ArrayList 实现 Itr()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="type">int</span> cursor;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    </span><br><span class="line">    Itr()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><h4 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h4><h5 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  123 123123     &quot;</span>;</span><br><span class="line">System.Out.println(str.trim());</span><br></pre></td></tr></table></figure><p>split()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span>  <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot; 231 2 31 23&quot;</span>;</span><br><span class="line">String[] t;</span><br><span class="line">t = str.split(<span class="string">&#x27; &#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="OS操作"><a href="#OS操作" class="headerlink" title="OS操作"></a>OS操作</h3><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ul><li><p>使用FileWriter</p></li><li><p>使用FileOutPutStream</p></li><li><p>使用FileOutPutStream追加写入文件</p></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="java异常处理"><a href="#java异常处理" class="headerlink" title="java异常处理"></a>java异常处理</h4><p><strong>分类：</strong></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203130836059.png" alt="image-20220313083650002"></p><ul><li>**检查性异常 (  )**：编译器会检查<code>Exception</code>异常。此类异常，要么通过<code>throws</code></li><li><strong>运行时异常 (RuntimeException)</strong></li><li><strong>错误 (Error)</strong></li></ul><p><strong>捕获异常</strong></p><p>try - catch 关键词可以捕获异常。</p><p><strong>抛出异常</strong></p><p><strong>自定义异常</strong></p><p><strong>NullPointerException</strong></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>使用断言</strong></p><p><strong>使用JDK Logging</strong></p><p><strong>使用Commons Logging</strong></p><p><strong>使用Log4j</strong></p><p><strong>使用SLF4J和Logback</strong></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203121318234.jpeg" alt="img"></p><ul><li><p>新建状态(<strong>New</strong>)：使用 <strong>new</strong> 关键字和<strong>Thread</strong>类或其子类及案例一个线程对象后，该线程对象就处于新建状态。直到运行**start()**这个线程。</p></li><li><p>就绪状态(<strong>ready</strong>)：当线程对象调用了**start()**方法之后,该线程就进入就绪状态。就绪状态的线程处于就绪队列中。要等待JVM里线程调度其的调度。</p></li><li><p>运行状态(<strong>running</strong>)：</p><ul><li>阻塞状态(<strong>blocked</strong>)：</li><li>waiting</li><li>timed waiting</li></ul></li><li><p>死亡状态(<strong>terminated</strong>)：</p></li></ul><p>创建一个线程</p><ul><li><p>通过实现Runnable接口</p><ul><li><p>最简单的方法就是实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承Thread类</p></li><li><p>通过Callable和Future创建线程</p></li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>@Resource 和 @Autowired</p><blockquote><p>参考：</p><ul><li><a href="https://juejin.cn/post/7022507865701089317">https://juejin.cn/post/7022507865701089317</a></li></ul></blockquote><table><thead><tr><th></th><th>@Resource</th><th>@Autowired</th></tr></thead><tbody><tr><td>来源</td><td>JDK原生注解，是Java标准，绝大部分框架都支持</td><td>Spring2.5 引入的注解</td></tr><tr><td>参数</td><td>name和type等7个参数</td><td>required一个参数，默认为true</td></tr><tr><td>机制</td><td>Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</td><td>只根据type进行注入，如果涉及到type无法辨别注入对象时，那需要依赖@qualifier或@Primary一起来修饰。</td></tr><tr><td>装配机制</td><td>默认byName自动装配</td><td>默认byType自动装配</td></tr><tr><td>作用</td><td>能用在：类、成员变量和方法上</td><td>能够用在：构造器、方法、参数、成员变量和注解上</td></tr><tr><td>装配顺序</td><td></td><td></td></tr></tbody></table><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><blockquote><p>是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。</p></blockquote><h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><h4 id="1-解析字符串，并返回一个Date对象；"><a href="#1-解析字符串，并返回一个Date对象；" class="headerlink" title="1. 解析字符串，并返回一个Date对象；"></a>1. 解析字符串，并返回一个Date对象；</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getBornDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> idNum.substring(<span class="number">6</span>,<span class="number">14</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">6</span>,<span class="number">8</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                mm=Calendar.JANUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                mm=Calendar.FEBRUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                mm=Calendar.MARCH;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                mm=Calendar.APRIL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                mm=Calendar.MAY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                mm=Calendar.JUNE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                mm=Calendar.JULY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                mm=Calendar.AUGUST;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                mm=Calendar.SEPTEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                mm=Calendar.OCTOBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                mm=Calendar.NOVEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                mm=Calendar.DECEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year-<span class="number">1900</span>,mm,day);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之Java篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之Java篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之J</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://codeink-github.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之Linux篇</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BLinux%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BLinux%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:52.174Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之Linux篇"><a href="#程序猿基础知识之Linux篇" class="headerlink" title="程序猿基础知识之Linux篇"></a>程序猿基础知识之Linux篇</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>只能单向通信</li><li>只能血缘关系的进程进行通信</li><li>依赖于文件系统</li><li>生命周期随进程</li><li>面向字节流的服务</li><li>管道内部提供了同步机制</li></ol><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h4><p>查看tar的内容而不提取它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -tvf xxx.tar</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf xxx.tar </span><br><span class="line">tar -zxvf xxx.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-f :&lt;备份文件&gt;或--file=&lt;备份文件&gt; 指定备份文件。</span><br><span class="line">-v :或--verbose 显示指令执行过程。</span><br><span class="line">-x :或--extract或--get 从备份文件中还原文件。</span><br><span class="line">-z ():用gzip方式处理 </span><br><span class="line">-</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之Linux篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之Linux篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="http://codeink-github.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之SQL篇</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BSQL%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BSQL%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:45.841Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之SQL篇"><a href="#程序猿基础知识之SQL篇" class="headerlink" title="程序猿基础知识之SQL篇"></a>程序猿基础知识之SQL篇</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="1-count"><a href="#1-count" class="headerlink" title="1. count()"></a>1. count()</h4><ul><li><p>count(column_name)语句</p><p>返回指定列的值的数目（null不计入），count(主键)比count(*)快</p></li><li><p>count(*)</p><p>返回表中的记录数，如果只有一个字段，则最快</p></li><li><p>count(1)</p><p>返回表中的记录数，如果没有主键，则比count(*)快</p></li><li><p>count(distict column)</p><p><code>sql SELECT count(distinct column_name) from table</code></p><p>返回指定列的不同值的数目</p></li></ul><h4 id="2-having-语句"><a href="#2-having-语句" class="headerlink" title="2. having 语句"></a>2. having 语句</h4><h4 id="3-在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键"><a href="#3-在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键" class="headerlink" title="3. 在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键"></a>3. 在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键</h4><p>元组：</p><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者考研在web应用程序中实现定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之SQL篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之SQL篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之SQL</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="SQL" scheme="http://codeink-github.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之信息安全篇</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:21.077Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之信息安全篇"><a href="#程序猿基础知识之信息安全篇" class="headerlink" title="程序猿基础知识之信息安全篇"></a>程序猿基础知识之信息安全篇</h1><h2 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密(也叫私钥加密)指<strong>加密和解密</strong>使用<strong>相同密钥的加密算法</strong>。有时又叫<strong>传统密码算法</strong>，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。</p><p>主要有DES算法，3DES算法，TDEA算法，Blowfish算法，RC5算法，IDEA算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>非对称加密需要两个密钥：公钥 (publickey) 和私钥 (privatekey)。公钥和私钥是一对，如果用公钥对数据加密，那么只能用对应的私钥解密。如果用私钥对数据加密，只能用对应的公钥进行解密。因为加密和解密用的是不同的密钥，所以称为非对称加密。</p><ul><li>RSA</li><li>DSA</li><li>ECC</li><li>DH</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之信息安全篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之信息安全篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之信</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="信息安全" scheme="http://codeink-github.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之前端基础</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之前端基础"><a href="#程序猿基础知识之前端基础" class="headerlink" title="程序猿基础知识之前端基础"></a>程序猿基础知识之前端基础</h1><h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><h3 id="HTML-x2F-CSS"><a href="#HTML-x2F-CSS" class="headerlink" title="HTML&#x2F;CSS"></a>HTML&#x2F;CSS</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p><strong>选择器：</strong></p><h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><blockquote><p> DOM（文档对象模型 Document Object Model）</p><p>通过HTML DOM，可访问JavaScript HTML文档的所有元素。当网页被加载时，浏览器会创建页面的文档对象模型（DOM）</p></blockquote><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203160001238.gif" alt="DOM HTML tree"></p><p><strong>查找HTML元素：</strong></p><ul><li><p>通过id查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过标签名查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);;</span><br><span class="line">  <span class="keyword">var</span> y = x.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">- 通过类名查找</span><br><span class="line"></span><br><span class="line">  <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">  document.getElementsByClassName(&quot;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**改变HTML**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 改变输出流</span></span><br><span class="line"><span class="string">- 改变内容</span></span><br><span class="line"><span class="string">- 改变属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**改变CSS**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 改变样式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>javascript</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;&quot;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用事件</p><p>HTML DOM允许我们通过触发事件来执行代码，如：</p><ul><li>元素被点击</li><li>页面加载完成</li><li>输入框被修改</li></ul></li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript 是Web的编程语言， 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web。</p><h4 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h4><p>cookie是客户端的，session是服务端</p><p>Cookie存</p><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><blockquote><p>jQuery 是一个<strong>JavaScript 库</strong>,  它极大地<strong>简化了JavaScript编程</strong>。它包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>Ajax</li></ul></blockquote><h5 id="jQuery-基础"><a href="#jQuery-基础" class="headerlink" title="jQuery 基础"></a>jQuery 基础</h5><p><strong>jQuery语法</strong></p><blockquote><p> jQuery语法是通过选取HTML元素,并对选取的元素执行某些操作.</p></blockquote><p>基础语法：$(selector).action()</p><p><strong>jQuery选择器</strong></p><blockquote></blockquote><p>jQuery事件</p><blockquote></blockquote><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h3><p>JSP与php、asp、asp.net等语言类似，运行在服务端的语言。JSP（全称Java Server Pages）是由Sun Micro systems公司倡导和许多公司参与共同创建的使软件开发者考研相应客户端请求，而动态的生成HTML、XML或其他格式文档的Web网页的技术标准。</p><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><ul><li><p>静态引入    </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li>静态引入是指把两个页面翻译成Servlet的过程中进行合并</li><li>静态引入的jsp文件中<strong>不能</strong>包含同名变量</li></ul></li><li><p>动态引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;&quot;</span> &gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><ul><li>动态引入是指在Servlet的运行过程中, 通过代码引入另一个页面</li></ul></li><li><p>可以有同名变量</p></li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="双向绑定："><a href="#双向绑定：" class="headerlink" title="双向绑定："></a>双向绑定：</h4><h4 id="组件通信（）"><a href="#组件通信（）" class="headerlink" title="组件通信（）"></a>组件通信（）</h4><ul><li>通过Prop向子组件传递数据</li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>每个Vue组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到DOM以及数据改变时更新DOM。在此过程中，它也会运行成为生命周期钩子的函数，让开发者有机会在特定阶段添加自己的代码。</p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203152345705.png" alt="lifecycle.16e4c08e" style="zoom: 40%;" /><p>共有14个阶段，</p><ul><li><p>beforeCreate</p><p>​    实例被初始化的时候被调用</p></li><li><p>created</p></li></ul><p>​            在实例处理完所有与状态相关的选项后调用。</p><ul><li>beforeMount</li></ul><p>​            在组件挂载之前调用。</p><ul><li>mounted</li></ul><p>​            组件挂载后调用。</p><ul><li>beforeUpdate</li></ul><p>​            在组件因为响应性状态改变而要更新DOM树之前调用。</p><ul><li>updated</li></ul><p>​            由于响应性状态更改，组件更新了它的DOM树后调用。</p><ul><li>beforeUnmount</li></ul><p>​            在卸载组件实例之前调用。</p><ul><li>unmounted</li></ul><p>​            组件卸载后调用。</p><ul><li>errorCaptured</li></ul><p>​            当捕获了从派生组件传播的错误时调用。</p><ul><li>renderTracked</li></ul><p>​            当组件的呈现效果跟踪响应性依赖时调用。</p><ul><li>renderTriggered</li></ul><p>​            当响应性依赖触发组件的呈现效果重新运行时调用。</p><ul><li>activated</li></ul><p>​            组件实例作为<KeepAlive>缓存的树的一部分插入到DOM后调用。</p><ul><li>deactivated</li></ul><p>​            组件实例作为<KeepAlive>缓存的树的一部分从DOM中移除后调用。</p><ul><li>serverPrefetch</li></ul><p>​            在组件实例在服务器上呈现之前解析的异步函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之前端基础&quot;&gt;&lt;a href=&quot;#程序猿基础知识之前端基础&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之前端基</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Web前端" scheme="http://codeink-github.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:28.375Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之算法篇"><a href="#程序猿基础知识之算法篇" class="headerlink" title="程序猿基础知识之算法篇"></a>程序猿基础知识之算法篇</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之算法篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之算法篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之算法篇&quot;&gt;</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="http://codeink-github.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识</title>
    <link href="http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
    <id>http://codeink-github.github.io/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-17T14:12:40.331Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之计算机网络篇"><a href="#程序猿基础知识之计算机网络篇" class="headerlink" title="程序猿基础知识之计算机网络篇"></a>程序猿基础知识之计算机网络篇</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之计算机网络篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之计算机网络篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识</summary>
      
    
    
    
    <category term="技术" scheme="http://codeink-github.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="计算机网络" scheme="http://codeink-github.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://codeink-github.github.io/2022/01/01/hello-world/"/>
    <id>http://codeink-github.github.io/2022/01/01/hello-world/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2022-03-15T16:28:43.052Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
