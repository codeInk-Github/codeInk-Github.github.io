<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codeInk寇墨</title>
  
  
  <link href="http://codeink-github.github.io/atom.xml" rel="self"/>
  
  <link href="http://codeink-github.github.io/"/>
  <updated>2022-03-14T09:05:42.845Z</updated>
  <id>http://codeink-github.github.io/</id>
  
  <author>
    <name>codeInk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java面试汇总</title>
    <link href="http://codeink-github.github.io/2022/03/13/interview/"/>
    <id>http://codeink-github.github.io/2022/03/13/interview/</id>
    <published>2022-03-13T15:32:44.529Z</published>
    <updated>2022-03-14T09:05:42.845Z</updated>
    
    <content type="html"><![CDATA[<p>面试知识汇总</p><h1 id="面试知识汇总"><a href="#面试知识汇总" class="headerlink" title="面试知识汇总"></a>面试知识汇总</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><p><strong>抽象类</strong></p><p>  在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>  抽象类除了**&#x3D;&#x3D;不能实例化对象&#x3D;&#x3D;**之外，类的其他功能依然存在，成员变量、成员方法呵呵构造方法的访问方式和普通类一样。</p><p>  由于抽象类不能实例化，所以抽象类必须被继承，才能被使用，也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</p><p>  父类包含了子类集合的常见方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p><p>  在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口</p><p>抽象方法：</p><p>  抽象方法没有定义，方法名之后直接跟一个分号，而不是花括号。</p><p><strong>接口：</strong></p><p><strong>接口与抽象类联系与不同</strong></p><p>相同点：</p><ul><li>都不能被实例化</li><li><strong>接口的实现类</strong>和<strong>抽象类的子类</strong> 都只有实现了接口或抽象类中的方法后才能实例化：</li></ul><p>不同点：</p><table><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>方法实现</td><td>只有方法的定义，不能有方法的实现。jdk1.8中可以定义default方法体</td><td>可以有方法的实现</td></tr><tr><td>关键字</td><td>实现接口的关键字为implements</td><td>继承的关键词为extends</td></tr><tr><td>实现与继承</td><td>一个类可以实现多个接口，可以间接的实现多重继承</td><td>一个类只能继承一个抽象类</td></tr><tr><td>强调</td><td>强调特定功能的实现</td><td>强调所属关系</td></tr><tr><td>成员变量</td><td>默认为static final ，必须赋初值，不能被修改；</td><td>默认为default，可在子类中被重新定义，也可被重新赋值</td></tr><tr><td>成员方法</td><td>默认为public、abstract</td><td>抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号接口</td></tr></tbody></table><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><img src="https://gitee.com/Zuckerberg_ng/mypicgo/raw/master/img/202203121350047.png" alt="image-20220312135000972" style="zoom:67%;" /><p>​         Java 集合框架主要包括两种类型的容器，一种是集合(Collection)， 存储着一个元素集合，另一种是图(Map) ，存储键值对。</p><p>所有的集合框架都包含如下内容：</p><ul><li><p><strong>接口</strong></p><ul><li>Collection</li><li>List</li><li>Set</li><li>SortedSet</li><li>Map</li><li>Map.Entry</li><li>SortedMap</li><li>Enumeration</li></ul></li><li><p><strong>实现(类)</strong>   – 常见的</p><ul><li>LinkedList</li><li>ArrayList</li><li>HashSet</li><li>TreeSet</li><li>HashMap</li></ul></li><li><p><strong>算法</strong></p></li></ul><h4 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator ( 迭代器 )"></a>Iterator ( 迭代器 )</h4><p>Iterator 不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList和HashSet等集合。</p><ul><li><p>接口 Iterator<E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasNext(): <span class="type">boolean</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span>: E</span><br><span class="line"><span class="title function_">remove</span><span class="params">()</span>: <span class="keyword">void</span></span><br><span class="line"><span class="title function_">forEachRemaining</span><span class="params">( Consumer&lt;?<span class="built_in">super</span> E?&gt;)</span> :<span class="keyword">void</span></span><br></pre></td></tr></table></figure></li><li><p>ArrayList 实现 Itr()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="type">int</span> cursor;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    </span><br><span class="line">    Itr()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><ul><li>循环队列</li></ul><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><ul><li>性质<ul><li>叶节点数为 $n_0$ ,  而度数为2的节点总数为$n_2$  . 则 $n_0 &#x3D; n_2 +1$</li><li>在非空二叉树中,   第 i 层的节点总数不超过  $2^{i-1}   (i \ge 1) $</li><li></li></ul></li></ul><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><h4 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h4><h5 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  123 123123     &quot;</span>;</span><br><span class="line">System.Out.println(str.trim());</span><br></pre></td></tr></table></figure><p>split()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span>  <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot; 231 2 31 23&quot;</span>;</span><br><span class="line">String[] t;</span><br><span class="line">t = str.split(<span class="string">&#x27; &#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="OS操作"><a href="#OS操作" class="headerlink" title="OS操作"></a>OS操作</h3><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ul><li><p>使用FileWriter</p></li><li><p>使用FileOutPutStream</p></li><li><p>使用FileOutPutStream追加写入文件</p></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="java异常处理"><a href="#java异常处理" class="headerlink" title="java异常处理"></a>java异常处理</h4><p><strong>分类：</strong></p><p><img src="https://gitee.com/Zuckerberg_ng/mypicgo/raw/master/img/202203130836059.png" alt="image-20220313083650002"></p><ul><li>**检查性异常 (  )**：编译器会检查<code>Exception</code>异常。此类异常，要么通过<code>throws</code></li><li><strong>运行时异常 (RuntimeException)</strong></li><li><strong>错误 (Error)</strong></li></ul><p><strong>捕获异常</strong></p><p>try - catch 关键词可以捕获异常。</p><p><strong>抛出异常</strong></p><p><strong>自定义异常</strong></p><p><strong>NullPointerException</strong></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>使用断言</strong></p><p><strong>使用JDK Logging</strong></p><p><strong>使用Commons Logging</strong></p><p><strong>使用Log4j</strong></p><p><strong>使用SLF4J和Logback</strong></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p><img src="https://gitee.com/Zuckerberg_ng/mypicgo/raw/master/img/202203121318234.jpeg" alt="img"></p><ul><li><p>新建状态(<strong>New</strong>)：使用 <strong>new</strong> 关键字和<strong>Thread</strong>类或其子类及案例一个线程对象后，该线程对象就处于新建状态。直到运行**start()**这个线程。</p></li><li><p>就绪状态(<strong>ready</strong>)：当线程对象调用了**start()**方法之后,该线程就进入就绪状态。就绪状态的线程处于就绪队列中。要等待JVM里线程调度其的调度。</p></li><li><p>运行状态(<strong>running</strong>)：</p><ul><li>阻塞状态(<strong>blocked</strong>)：</li><li>waiting</li><li>timed waiting</li></ul></li><li><p>死亡状态(<strong>terminated</strong>)：</p></li></ul><p>创建一个线程</p><ul><li><p>通过实现Runnable接口</p><ul><li><p>最简单的方法就是实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承Thread类</p></li><li><p>通过Callable和Future创建线程</p></li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>@Resource 和 @Autowired</p><blockquote><p>参考：</p><ul><li><a href="https://juejin.cn/post/7022507865701089317">https://juejin.cn/post/7022507865701089317</a></li></ul></blockquote><table><thead><tr><th></th><th>@Resource</th><th>@Autowired</th></tr></thead><tbody><tr><td>来源</td><td>JDK原生注解，是Java标准，绝大部分框架都支持</td><td>Spring2.5 引入的注解</td></tr><tr><td>参数</td><td>name和type等7个参数</td><td>required一个参数，默认为true</td></tr><tr><td>机制</td><td>Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</td><td>只根据type进行注入，如果涉及到type无法辨别注入对象时，那需要依赖@qualifier或@Primary一起来修饰。</td></tr><tr><td>装配机制</td><td>默认byName自动装配</td><td>默认byType自动装配</td></tr><tr><td>作用</td><td>能用在：类、成员变量和方法上</td><td>能够用在：构造器、方法、参数、成员变量和注解上</td></tr><tr><td>装配顺序</td><td></td><td></td></tr></tbody></table><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><blockquote><p>是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。</p></blockquote><h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><h4 id="1-解析字符串，并返回一个Date对象；"><a href="#1-解析字符串，并返回一个Date对象；" class="headerlink" title="1. 解析字符串，并返回一个Date对象；"></a>1. 解析字符串，并返回一个Date对象；</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getBornDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> idNum.substring(<span class="number">6</span>,<span class="number">14</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">6</span>,<span class="number">8</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                mm=Calendar.JANUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                mm=Calendar.FEBRUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                mm=Calendar.MARCH;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                mm=Calendar.APRIL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                mm=Calendar.MAY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                mm=Calendar.JUNE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                mm=Calendar.JULY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                mm=Calendar.AUGUST;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                mm=Calendar.SEPTEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                mm=Calendar.OCTOBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                mm=Calendar.NOVEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                mm=Calendar.DECEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year-<span class="number">1900</span>,mm,day);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-count"><a href="#1-count" class="headerlink" title="1. count()"></a>1. count()</h3><ul><li><p>count(column_name)语句</p><p>返回指定列的值的数目（null不计入），count(主键)比count(*)快</p></li><li><p>count(*)</p><p>返回表中的记录数，如果只有一个字段，则最快</p></li><li><p>count(1)</p><p>返回表中的记录数，如果没有主键，则比count(*)快</p></li><li><p>count(distict column)</p><p><code>sql SELECT count(distinct column_name) from table</code></p><p>返回指定列的不同值的数目</p></li></ul><h3 id="2-having-语句"><a href="#2-having-语句" class="headerlink" title="2. having 语句"></a>2. having 语句</h3><h3 id="3-在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键"><a href="#3-在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键" class="headerlink" title="3. 在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键"></a>3. 在关系模型中，实现“关系中不允许出现相同的元组”的约束是通过主键</h3><p>元组：</p><h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><h3 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h3><p>cookie是客户端的，session是服务端</p><p>Cookie存</p><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><ul><li><p>静态引入    </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li>静态引入是指把两个页面翻译成Servlet的过程中进行合并</li><li>静态引入的jsp文件中<strong>不能</strong>包含同名变量</li></ul></li><li><p>动态引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;&quot;</span> &gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><ul><li>动态引入是指在Servlet的运行过程中, 通过代码引入另一个页面</li></ul></li><li><p>可以有同名变量</p></li></ul><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><blockquote><p>jQuery 是一个<strong>JavaScript 库</strong>,  它极大地<strong>简化了JavaScript编程</strong></p></blockquote><h4 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h4><p>jQuery语法是通过选取HTML元素,并对选取的元素执行某些操作.</p><h4 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h4><h4 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h4><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><h4 id="1-二分查找法"><a href="#1-二分查找法" class="headerlink" title="1. 二分查找法"></a>1. 二分查找法</h4><h5 id="实现关键："><a href="#实现关键：" class="headerlink" title="实现关键："></a>实现关键：</h5><ul><li>向下取整</li><li>target &gt; midValue  时  left &#x3D; mid +1 </li><li>target &lt; midValue  时  right&#x3D; mid -1</li></ul><h4 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def <span class="title function_">BinarySearch</span><span class="params">(arr, key)</span>:</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = len(arr)-<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right)<span class="comment">//2</span></span><br><span class="line">        <span class="type">if</span> <span class="variable">key</span> <span class="operator">=</span>= arr[mid]:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="title function_">elif</span> <span class="params">(key &lt; arr[mid])</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="相关公式"><a href="#相关公式" class="headerlink" title="相关公式"></a>相关公式</h4><ul><li>最小次数 ：1</li><li>最大次数 ： $log_2(n) + 1$ 向下取整</li></ul><p>对有序表，根据二分查找法定义，每次比较之后问题规模都会减小一半，所以<code>2^k=N</code>，解得<code>k=log2(n)</code>。又因为最后只剩一个元素时，也要执行查找过程，所以+1。</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="协议层次"><a href="#协议层次" class="headerlink" title="协议层次"></a>协议层次</h3><table><thead><tr><th>层</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>FTP、HTTP、SMTP、NFS</td></tr><tr><td>表示层（弃用）</td><td>telnet</td></tr><tr><td>会话层（弃用）</td><td>SMTP、DNS</td></tr><tr><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>IP、ICMP、ARP、</td></tr><tr><td>数据链路层</td><td>PPP</td></tr><tr><td>物理层</td><td></td></tr></tbody></table><h3 id="http请求方法"><a href="#http请求方法" class="headerlink" title="http请求方法"></a>http请求方法</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET :"></a>GET :</h4><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li></ul><h4 id="POST"><a href="#POST" class="headerlink" title="POST :"></a>POST :</h4><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul><p>下面的表格比较了两种 HTTP 方法：GET 和 POST。</p><table><thead><tr><th align="left"></th><th align="left">GET</th><th align="left">POST</th></tr></thead><tbody><tr><td align="left">后退    &#x2F;刷新</td><td align="left"><strong>无害</strong></td><td align="left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）</td></tr><tr><td align="left">书签</td><td align="left">可收藏为书签</td><td align="left">不可收藏为书签</td></tr><tr><td align="left">缓存</td><td align="left"><strong>能被缓存</strong></td><td align="left">不能缓存</td></tr><tr><td align="left">编码类型</td><td align="left">application&#x2F;x-www-form-urlencoded</td><td align="left">application&#x2F;x-www-form-urlencoded or multipart&#x2F;form-data 为二进制数据使用多重编码。</td></tr><tr><td align="left">历史</td><td align="left">参数保留在浏览器历史中。</td><td align="left">参数不会保存在浏览器历史中。</td></tr><tr><td align="left">数据长度限制</td><td align="left">当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的(最大长度是 2048 个字符)</td><td align="left">无限制</td></tr><tr><td align="left">对数据类型的限制</td><td align="left">只允许 ASCII 字符</td><td align="left">没有限制。也允许二进制数据</td></tr><tr><td align="left">安全性</td><td align="left"><strong>安全性较差</strong>，因为所发送的数据是 URL 的一部分。  在发送密码或其他敏感信息时绝不要使用 GET</td><td align="left">POST更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td align="left">可见性</td><td align="left">数据在 URL 中对所有人都是可见的</td><td align="left">数据不会显示在 URL 中</td></tr></tbody></table><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p> 上传指定的 URI 表示。</p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p> 删除指定资源。</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</p><h2 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密(也叫私钥加密)指<strong>加密和解密</strong>使用<strong>相同密钥的加密算法</strong>。有时又叫<strong>传统密码算法</strong>，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。</p><p>主要有DES算法，3DES算法，TDEA算法，Blowfish算法，RC5算法，IDEA算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>非对称加密需要两个密钥：公钥 (publickey) 和私钥 (privatekey)。公钥和私钥是一对，如果用公钥对数据加密，那么只能用对应的私钥解密。如果用私钥对数据加密，只能用对应的公钥进行解密。因为加密和解密用的是不同的密钥，所以称为非对称加密。</p><ul><li>RSA</li><li>DSA</li><li>ECC</li><li>DH</li></ul><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li><p>只能单向通信</p></li><li><p>只能血缘关系的进程进行通信</p></li><li><p>依赖于文件系统</p></li><li><p>生命周期随进程</p></li><li><p>面向字节流的服务</p></li><li><p>管道内部提供了同步机制</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面试知识汇总&lt;/p&gt;
&lt;h1 id=&quot;面试知识汇总&quot;&gt;&lt;a href=&quot;#面试知识汇总&quot; class=&quot;headerlink&quot; title=&quot;面试知识汇总&quot;&gt;&lt;/a&gt;面试知识汇总&lt;/h1&gt;&lt;h2 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://codeink-github.github.io/2022/03/13/hello-world/"/>
    <id>http://codeink-github.github.io/2022/03/13/hello-world/</id>
    <published>2022-03-13T15:17:44.250Z</published>
    <updated>2022-03-13T15:55:59.231Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
