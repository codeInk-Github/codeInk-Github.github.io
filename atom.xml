<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codeInk寇墨</title>
  
  
  <link href="https://codeink.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://codeink.gitee.io/blog/"/>
  <updated>2022-06-03T03:35:08.505Z</updated>
  <id>https://codeink.gitee.io/blog/</id>
  
  <author>
    <name>codeInk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序猿基础知识之Java篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BJava%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BJava%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T03:35:08.505Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之Java篇"><a href="#程序猿基础知识之Java篇" class="headerlink" title="程序猿基础知识之Java篇"></a>程序猿基础知识之Java篇</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul><li>^   –&gt; 异或</li><li>**   –&gt; 乘方</li></ul><h4 id="String-相关"><a href="#String-相关" class="headerlink" title="String 相关"></a>String 相关</h4><ul><li><p>String 对象是不可变的</p></li><li><p>StringBuffer和StringBuilder类的对象能够被多次修改，且不产生新的未使用对象。</p></li><li><p>StringBuilder相较于StringBuffer有速度优势，所以多数情况下建议使用StringBuilder，但它不是线程安全的（不能同步访问）</p></li><li><p>要求线程安全的情况下，必须使用String Buffer类</p></li></ul><table><thead><tr><th></th><th>String</th><th>StringBuilder</th><th>StringBuffer</th></tr></thead><tbody><tr><td>基本原则</td><td>少量的数据</td><td>单线程操作大量数据</td><td>多线程操作大量数据</td></tr><tr><td>拼接</td><td>不要频繁用“+”进行拼接</td><td>可以用String builder的append方法</td><td></td></tr><tr><td>使用策略</td><td></td><td>构造时，尽可能指定容量（不超过16个字符就不需要了）</td><td>构造时，尽可能指定容量（不超过16个字符就不需要了）</td></tr><tr><td>速度</td><td>最慢</td><td>最快</td><td>适中</td></tr></tbody></table><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><ul><li>循环队列</li></ul><h5 id="树"><a href="#树" class="headerlink" title="树"></a>树</h5><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><ul><li>性质<ul><li>叶节点数为 $n_0$ ,  而度数为2的节点总数为$n_2$  . 则 $n_0 &#x3D; n_2 +1$</li><li>在非空二叉树中,   第 i 层的节点总数不超过  $2^{i-1}   (i \ge 1) $</li><li></li></ul></li></ul><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><p><strong>抽象类</strong></p><p>  在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>  抽象类除了**&#x3D;&#x3D;不能实例化对象&#x3D;&#x3D;**之外，类的其他功能依然存在，成员变量、成员方法呵呵构造方法的访问方式和普通类一样。</p><p>  &#x3D;&#x3D;由于抽象类不能实例化，所以抽象类必须被继承，才能被使用&#x3D;&#x3D;，也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</p><p>  父类包含了子类集合的常见方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p><p>  在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口</p><p>抽象方法：</p><p>  抽象方法没有定义，方法名之后直接跟一个分号，而不是花括号。</p><p><strong>接口：</strong></p><p><strong>接口与抽象类联系与不同</strong></p><p>相同点：</p><ul><li>都不能被实例化</li><li><strong>接口的实现类</strong>和<strong>抽象类的子类</strong> 都只有实现了接口或抽象类中的方法后才能实例化：</li></ul><p>不同点：</p><table><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>方法实现</td><td>只有方法的定义，不能有方法的实现。jdk1.8中可以定义default方法体</td><td>可以有方法的实现</td></tr><tr><td>关键字</td><td>实现接口的关键字为implements</td><td>继承的关键词为extends</td></tr><tr><td>实现与继承</td><td>一个类可以实现多个接口，可以间接的实现多重继承</td><td>一个类只能继承一个抽象类</td></tr><tr><td>强调</td><td>强调特定功能的实现</td><td>强调所属关系</td></tr><tr><td>成员变量</td><td>默认为static final ，必须赋初值，不能被修改；</td><td>默认为default，可在子类中被重新定义，也可被重新赋值</td></tr><tr><td>成员方法</td><td>默认为public、abstract</td><td>抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号接口</td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><ul><li>volatile 关键字<br> - 能保证线程安全</li></ul><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203121350047.png" alt="image-20220312135000972" style="zoom:67%;" /><p>​ Java 集合框架主要包括两种类型的容器，一种是集合(Collection)， 存储着一个元素集合，另一种是图(Map) ，存储键值对。</p><p>所有的集合框架都包含如下内容：</p><ul><li><p><strong>接口</strong></p><ul><li>Collection</li><li>List</li><li>Set</li><li>SortedSet</li><li>Map</li><li>Map.Entry</li><li>SortedMap</li><li>Enumeration</li></ul></li><li><p><strong>实现(类)</strong>   – 常见的</p><ul><li>LinkedList</li><li>ArrayList</li><li>HashSet</li><li>TreeSet</li><li>HashMap</li></ul></li><li><p><strong>算法</strong></p></li></ul><h4 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator ( 迭代器 )"></a>Iterator ( 迭代器 )</h4><p>Iterator 不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList和HashSet等集合。</p><ul><li><p>接口 Iterator<E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasNext(): <span class="type">boolean</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span>: E</span><br><span class="line"><span class="title function_">remove</span><span class="params">()</span>: <span class="keyword">void</span></span><br><span class="line"><span class="title function_">forEachRemaining</span><span class="params">( Consumer&lt;?<span class="built_in">super</span> E?&gt;)</span> :<span class="keyword">void</span></span><br></pre></td></tr></table></figure></li><li><p>ArrayList 实现 Itr()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="type">int</span> cursor;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    </span><br><span class="line">    Itr()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><h4 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h4><h5 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  123 123123     &quot;</span>;</span><br><span class="line">System.Out.println(str.trim());</span><br></pre></td></tr></table></figure><p>split()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span>  <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot; 231 2 31 23&quot;</span>;</span><br><span class="line">String[] t;</span><br><span class="line">t = str.split(<span class="string">&#x27; &#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="OS操作"><a href="#OS操作" class="headerlink" title="OS操作"></a>OS操作</h3><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ul><li><p>使用FileWriter</p></li><li><p>使用FileOutPutStream</p></li><li><p>使用FileOutPutStream追加写入文件</p></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="java异常处理"><a href="#java异常处理" class="headerlink" title="java异常处理"></a>java异常处理</h4><p>异常时程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p><p>异常发生的原因有很多，通常包含以下几大类：</p><ul><li>用户输入了非法数据</li><li>要打开的文件不存在</li><li>网络通信时连接中断，或者JVM内存溢出</li><li>…</li></ul><p><strong>分类：</strong></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203130836059.png" alt="image-20220313083650002"></p><ul><li>**检查性异常 (CheckedException )**：编译器会检查<code>Exception</code>异常。此类异常，要么通过<code>throws</code></li><li><strong>运行时异常 (RuntimeException)：</strong> 运行时异常是可能被程序员避免的异常，它可以在编译时被忽略</li><li><strong>错误 (Error)：</strong>不是异常，而是脱离程序员控制的问题，通常在代码中被忽略。</li></ul><p><strong>捕获异常</strong></p><p>try - catch 关键词可以捕获异常。</p><p><strong>抛出异常</strong></p><p><strong>InterruptedException</strong>:</p><p><strong>代表方法</strong>:</p><ul><li><code>java.lang.Object</code>的wait方法</li><li><code>java.lang.Thread</code>的sleep方法</li><li><code>java.lang.Thread</code>的join方法</li></ul><p><strong>自定义异常</strong></p><p><strong>NullPointerException</strong></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>使用断言</strong></p><p><strong>使用JDK Logging</strong></p><p><strong>使用Commons Logging</strong></p><p><strong>使用Log4j</strong></p><p><strong>使用SLF4J和Logback</strong></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203121318234.jpeg" alt="img"></p><ul><li><p>新建状态(<strong>New</strong>)：使用 <strong>new</strong> 关键字和<strong>Thread</strong>类或其子类及案例一个线程对象后，该线程对象就处于新建状态。直到运行**start()**这个线程。</p></li><li><p>就绪状态(<strong>ready</strong>)：当线程对象调用了**start()**方法之后,该线程就进入就绪状态。就绪状态的线程处于就绪队列中。要等待JVM里线程调度其的调度。</p></li><li><p>运行状态(<strong>running</strong>)：</p><ul><li>阻塞状态(<strong>blocked</strong>)：</li><li>waiting</li><li>timed waiting</li></ul></li><li><p>死亡状态(<strong>terminated</strong>)：</p></li></ul><p>创建一个线程</p><ul><li><p>通过实现Runnable接口</p><ul><li><p>最简单的方法就是实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承Thread类</p></li><li><p>通过Callable和Future创建线程</p></li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>@Resource 和 @Autowired</p><blockquote><p>参考：</p><ul><li><a href="https://juejin.cn/post/7022507865701089317">https://juejin.cn/post/7022507865701089317</a></li></ul></blockquote><table><thead><tr><th></th><th>@Resource</th><th>@Autowired</th></tr></thead><tbody><tr><td>来源</td><td>JDK原生注解，是Java标准，绝大部分框架都支持</td><td>Spring2.5 引入的注解</td></tr><tr><td>参数</td><td>name和type等7个参数</td><td>required一个参数，默认为true</td></tr><tr><td>机制</td><td>Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</td><td>只根据type进行注入，如果涉及到type无法辨别注入对象时，那需要依赖@qualifier或@Primary一起来修饰。</td></tr><tr><td>装配机制</td><td>默认byName自动装配</td><td>默认byType自动装配</td></tr><tr><td>作用</td><td>能用在：类、成员变量和方法上</td><td>能够用在：构造器、方法、参数、成员变量和注解上</td></tr><tr><td>装配顺序</td><td></td><td></td></tr></tbody></table><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><blockquote><p>是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的内部属性和方法。</p></blockquote><p><strong>通过反射机制，可以在运行时访问java对象的属性、方法以及构造方法等</strong></p><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul><li><strong>开发通用框架</strong></li><li><strong>动态代理</strong></li><li><strong>注解</strong></li><li><strong>可拓展性功能</strong></li></ul><h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><h4 id="1-解析字符串，并返回一个Date对象；"><a href="#1-解析字符串，并返回一个Date对象；" class="headerlink" title="1. 解析字符串，并返回一个Date对象；"></a>1. 解析字符串，并返回一个Date对象；</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getBornDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> idNum.substring(<span class="number">6</span>,<span class="number">14</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> Integer.parseInt(birth.substring(<span class="number">6</span>,<span class="number">8</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                mm=Calendar.JANUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                mm=Calendar.FEBRUARY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                mm=Calendar.MARCH;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                mm=Calendar.APRIL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                mm=Calendar.MAY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                mm=Calendar.JUNE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                mm=Calendar.JULY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                mm=Calendar.AUGUST;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                mm=Calendar.SEPTEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                mm=Calendar.OCTOBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                mm=Calendar.NOVEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                mm=Calendar.DECEMBER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year-<span class="number">1900</span>,mm,day);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之Java篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之Java篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之J</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="https://codeink.gitee.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之Linux篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BLinux%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BLinux%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T03:55:46.083Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之Linux篇"><a href="#程序猿基础知识之Linux篇" class="headerlink" title="程序猿基础知识之Linux篇"></a>程序猿基础知识之Linux篇</h1><h2 id="linux-基础知识"><a href="#linux-基础知识" class="headerlink" title="linux 基础知识"></a>linux 基础知识</h2><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>只能单向通信</li><li>只能血缘关系的进程进行通信</li><li>依赖于文件系统</li><li>生命周期随进程</li><li>面向字节流的服务</li><li>管道内部提供了同步机制</li></ol><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h4><p>查看tar的内容而不提取它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -tvf xxx.tar</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf xxx.tar </span><br><span class="line">tar -zxvf xxx.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-f :&lt;备份文件&gt;或--file=&lt;备份文件&gt; 指定备份文件。</span><br><span class="line">-v :或--verbose 显示指令执行过程。</span><br><span class="line">-x :或--extract或--get 从备份文件中还原文件。</span><br><span class="line">-z ():用gzip方式处理 </span><br><span class="line">-</span><br></pre></td></tr></table></figure><h3 id="zip解压"><a href="#zip解压" class="headerlink" title="zip解压"></a>zip解压</h3><p><strong>step 1</strong>  安装解压软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br></pre></td></tr></table></figure><p><strong>step 2</strong> 解压文件（注意：要切换到压缩包的目录中去）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unzip    xxxxx.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h2><p><a href="https://juejin.cn/post/6844904051063144455">https://juejin.cn/post/6844904051063144455</a></p><p><a href="https://www.cnblogs.com/2020javamianshibaodian/p/12920243.html">https://www.cnblogs.com/2020javamianshibaodian/p/12920243.html</a></p><p><a href="https://blog.csdn.net/ynnmnm/article/details/45097857">https://blog.csdn.net/ynnmnm/article/details/45097857</a></p><p><a href="https://www.cnblogs.com/beanmoon/p/3173924.html">https://www.cnblogs.com/beanmoon/p/3173924.html</a></p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p><img src="https://s2.loli.net/2022/05/31/FPdUhtu1Z9ynim8.png" alt="image-20220531224620653"></p><p><img src="https://s2.loli.net/2022/05/31/9dr6VjTA5ecGZu4.png" alt="image-20220531235127022"></p><h3 id="检查状态"><a href="#检查状态" class="headerlink" title="检查状态"></a>检查状态</h3><p><img src="https://s2.loli.net/2022/05/31/B57vQeFwHkmtUAI.png" alt="image-20220531235216730"></p><h3 id="安全性检查"><a href="#安全性检查" class="headerlink" title="安全性检查"></a>安全性检查</h3><p><img src="https://s2.loli.net/2022/06/01/mbQszVi36eWruHa.png" alt="image-20220601092653811"></p><p><img src="https://s2.loli.net/2022/06/01/nkdmSpNUTbgKwzY.png" alt="image-20220601093305608"></p><h3 id="新建MySQL用户"><a href="#新建MySQL用户" class="headerlink" title="新建MySQL用户"></a>新建MySQL用户</h3><p><img src="https://s2.loli.net/2022/06/01/UrWFuE9fiBjvay3.png" alt="image-20220601124734321"></p><h3 id="允许MySQL远程连接"><a href="#允许MySQL远程连接" class="headerlink" title="允许MySQL远程连接"></a>允许MySQL远程连接</h3><p><img src="https://s2.loli.net/2022/06/01/NqJOvGsTVtkoUIp.png" alt="image-20220601124637893"></p><p><img src="https://s2.loli.net/2022/06/01/XxRIphSvGklouTH.png" alt="image-20220601124612298"></p><h3 id="检验连接状态"><a href="#检验连接状态" class="headerlink" title="检验连接状态"></a>检验连接状态</h3><p><img src="https://s2.loli.net/2022/06/01/vOrWlVwg7qPzj9N.png" alt="image-20220601124550469"></p><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p><img src="https://s2.loli.net/2022/06/01/mprzUvVMKgkNQ7t.png" alt="image-20220601190848373"></p><p><img src="https://s2.loli.net/2022/06/01/Vq5wKY7CuLjWEPS.png" alt="image-20220601191026631"></p><p><img src="https://s2.loli.net/2022/06/01/dZlKsS8pbt1OiIT.png" alt="image-20220601191303123"></p><p><img src="https://s2.loli.net/2022/06/01/tVz4MIRixHvyZpc.png" alt="image-20220601191351726"></p><p><img src="https://s2.loli.net/2022/06/01/Su2CXUYkOshivGj.png" alt="image-20220601191514223"></p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p><img src="https://s2.loli.net/2022/06/02/lEcViJqMhUad52k.png" alt="image-20220602165221905"></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作用: 在安装过程中选项默认为yes</span></span><br><span class="line">-y</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/h4jbspvVCZHzMOB.png" alt="image-20220602154206023"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>删除nginx，–purge包括配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure><p>自动移除全部不使用的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><p>列出与nginx相关的软件 并删除显示的软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line">sudo apt-get --purge remove nginx-common</span><br><span class="line">sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure><p>再次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> nginx <span class="comment"># 不在显示nginx</span></span><br></pre></td></tr></table></figure><p>这样就可以完全卸载掉nginx包括配置文件<br>注意点：首先需要停止nginx的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="1-Iptables"><a href="#1-Iptables" class="headerlink" title="1. Iptables"></a>1. Iptables</h3><blockquote><p>Cent OS 7.0以下的使用iptables</p></blockquote><blockquote><p>由于CenterOS7.0以上版本并没有预装Iptables,我们需要自行装。</p></blockquote><ul><li><p>安装前先关闭firewall防火墙</p><p><img src="https://s2.loli.net/2022/06/02/Zk72eBdslU9XJAT.webp" alt="展示图片"></p></li><li><p>安装iptables:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables</span><br></pre></td></tr></table></figure><ul><li>安装iptables-services:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>开启防火墙：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start iptables.service</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/iH4MS16tJ5hpXvD.webp" alt="展示图片"></p><ul><li>关闭防火墙：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop iptables.service</span><br></pre></td></tr></table></figure><ul><li>查看防火墙状态：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status iptables.service</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>设置开机启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> iptables.service</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>禁用开机启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> iptables.service</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>查看filter表的几条链规则(INPUT链可以看出开放了哪些端口)：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/XjCAeoP3zS2M5HR.webp" alt="展示图片"></p><ul><li>查看NAT表的链规则：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -L -n</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/4m6HBuOzGvtQ2xN.webp" alt="展示图片"></p><ul><li>清除防火墙所有规则：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br></pre></td></tr></table></figure><ul><li>给INPUT链添加规则（开放8080端口）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/DGRMkhUWrim2ZcH.webp" alt="展示图片"></p><ul><li>查找规则所在行号：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT --line-numbers -n</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/79IvJDpmE8BnQgM.webp" alt="展示图片"></p><ul><li>根据行号删除过滤规则（关闭8080端口）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT 1</span><br></pre></td></tr></table></figure><h3 id="2-firewall"><a href="#2-firewall" class="headerlink" title="2. firewall"></a>2. firewall</h3><blockquote><p>CentOS 7.0 以上的使用firewall</p></blockquote><ul><li>开启防火墙：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><ul><li>查看防火墙状态：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><ul><li>设置开机启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure><ul><li>禁用开机启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><ul><li>重启防火墙：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>开放端口（修改后需要重启防火墙方可生效）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/wRmLdrZupcfyvGo.webp" alt="展示图片"></p><ul><li>查看开放的端口：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/JSbikndj1GD59lI.png" alt="image-20220602184027056"></p><ul><li>关闭端口：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/02/xETbXnfvL2Jqowe.webp" alt="展示图片"></p><h3 id="3-ufw"><a href="#3-ufw" class="headerlink" title="3.  ufw"></a>3.  ufw</h3><p>Ubuntu系统默认是安装了ufw防火墙的。<br>查看防火墙的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p>inactive表示防火墙没有开启，并不是没有安装防火墙。</p><h4 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><ul><li>Ubuntu开启防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><ul><li>防火墙添加开放普通端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 22</span><br><span class="line"><span class="comment"># 开放22端口：</span></span><br></pre></td></tr></table></figure><ul><li>开启完成，需要重启防火墙生效：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure><ul><li>Ubuntu防火墙关闭普通端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow 21</span><br></pre></td></tr></table></figure><ul><li>Ubuntu防火墙开放规定协议的端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 8001/tcp</span><br></pre></td></tr></table></figure><ul><li>Ubuntu防火墙关闭指定协议端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow 8001/tcp </span><br></pre></td></tr></table></figure><h4 id="开放限定ip地址端口"><a href="#开放限定ip地址端口" class="headerlink" title="开放限定ip地址端口"></a>开放限定ip地址端口</h4><p>1、开放指定ip所有操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.11</span><br></pre></td></tr></table></figure><p>2、关闭指定ip所有操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow from 192.168.1.11</span><br></pre></td></tr></table></figure><p>3、开放指定ip对应端口操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure><p>4、关闭指定ip对应端口操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure><h4 id="Ubuntu关闭防火墙"><a href="#Ubuntu关闭防火墙" class="headerlink" title="Ubuntu关闭防火墙"></a>Ubuntu关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之Linux篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之Linux篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://codeink.gitee.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之信息安全篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T14:57:23.030Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之信息安全篇"><a href="#程序猿基础知识之信息安全篇" class="headerlink" title="程序猿基础知识之信息安全篇"></a>程序猿基础知识之信息安全篇</h1><h2 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密(也叫私钥加密)指<strong>加密和解密</strong>使用<strong>相同密钥的加密算法</strong>。有时又叫<strong>传统密码算法</strong>，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。</p><p>主要有DES算法，3DES算法，TDEA算法，Blowfish算法，RC5算法，IDEA算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>非对称加密需要两个密钥：公钥 (public key) 和私钥 (private key)。</p><ul><li>RSA</li><li>DSA</li><li>ECC</li><li>DH</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之信息安全篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之信息安全篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之信</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="信息安全" scheme="https://codeink.gitee.io/blog/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之SQL篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BSQL%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8BSQL%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T08:36:43.688Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之SQL篇"><a href="#程序猿基础知识之SQL篇" class="headerlink" title="程序猿基础知识之SQL篇"></a>程序猿基础知识之SQL篇</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>元组：一行数据，或者说一组相关的数据</p><p>k元组：‘k’个记录的有序列表</p><p>完整性约束：</p><h4 id="cmd-中打开mysql"><a href="#cmd-中打开mysql" class="headerlink" title="cmd 中打开mysql"></a>cmd 中打开mysql</h4><ul><li>将MySQL根目录加入环境变量</li></ul><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251702409.png" alt="image-20220325170219351"></p><ul><li>将<code>%MYSQL_HOME%/bin</code>加入path</li></ul><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251703206.png" alt="image-20220325170333141"></p><ul><li>在cmd中使用<code>mysql -u root -p</code>即可进入mysql</li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="1-count"><a href="#1-count" class="headerlink" title="1. count()"></a>1. count()</h4><ul><li><p>count(column_name)语句</p><p>返回指定列的值的数目（null不计入），count(主键)比count(*)快</p></li><li><p>count(*)</p><p>返回表中的记录数，如果只有一个字段，则最快</p></li><li><p>count(1)</p><p>返回表中的记录数，如果没有主键，则比count(*)快</p></li><li><p>count(distict column)</p><p><code>sql SELECT count(distinct column_name) from table</code></p><p>返回指定列的不同值的数目</p></li></ul><h4 id="2-having-语句"><a href="#2-having-语句" class="headerlink" title="2. having 语句"></a>2. having 语句</h4><h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><p>第一：列不可再分</p><p>第二：行可以唯一区分 — 主键约束</p><p>第三：表的非主属性</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="索引作用"><a href="#索引作用" class="headerlink" title="索引作用"></a>索引作用</h4><p>索引可以大大提高MySQL的检索速度。</p><p>索引分为单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引；组合索引，即一个索引包含多个列。</p><p>创建索引时，需要确保该索引是应用在SQL查询语句的条件（一般作为Where子句的条件）。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>过多的使用索引将会造成滥用，因为索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index indexName on table_name (column_name)</span><br></pre></td></tr></table></figure><ul><li>修改表结构(添加索引)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> InDex indexName(columnName)</span><br></pre></td></tr></table></figure><ul><li>创建表的时候直接指定</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> myTable(</span><br><span class="line">ID <span class="type">int</span> <span class="keyword">Not</span> <span class="keyword">null</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    index [indexName] (username(length))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>删除索引的语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index [indexName] on myTable;</span><br></pre></td></tr></table></figure><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>唯一索引与普通索引类似, 不同的就是索引列的值必须唯一, 但允许有空值, 如果是组合索引, 则列值的组合必须唯一。它有以下几种创建方式：</p><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index indexName on myTable(Username(length));</span><br></pre></td></tr></table></figure><ul><li>修改表结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myTable Add unique [indexName] (username(length));</span><br></pre></td></tr></table></figure><ul><li>创建表的时间直接指定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create table myTable(</span><br><span class="line">Id int not null,</span><br><span class="line">    username varchar(16) not null,</span><br><span class="line">    unique [indexName] (username(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="使用ALTER命令添加和删除索引"><a href="#使用ALTER命令添加和删除索引" class="headerlink" title="使用ALTER命令添加和删除索引"></a>使用ALTER命令添加和删除索引</h4><p>有四种方式来添加数据表的索引：</p><ul><li><p><code>Alter Table tbl_name add primary key(column_list)</code>: 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。 </p></li><li><p><code>Alter table tbl_name add Unique index_name (column_list)</code>： 这条语句创建索引的值必须是唯一的，除了NULL</p></li><li><p><code>Alter table tbl_name index index_name (column_list)</code>：添加普通索引，索引值可以出现多次。</p></li><li><p><code>Alter table tbl_name add fullText index_name (column_list)</code>:  该语句指定了索引为FULLTEXT ，用于全文索引</p></li></ul><h4 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h4><p>可以使用Show index 命令来列出表中的相关的索引信息，可以通过添加 \G来格式化输出信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from table_name \G</span><br></pre></td></tr></table></figure><h4 id="为什么索引会提高检索速度？"><a href="#为什么索引会提高检索速度？" class="headerlink" title="为什么索引会提高检索速度？"></a><strong>为什么索引会提高检索速度</strong>？</h4><p><strong>索引原理</strong>: 通过不断地缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询（&gt;, &lt;, between, in）模糊查询（like）、并集查询（or）等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果有1000条数据，1~100分成第一段， 101 ~ 200分成第二段，201 ~ 300分成第三段 … … 进而又演化为搜索树，由于数据一般保存在磁盘上，访问磁盘的成本大概是访问内存的十万倍左右，简单的搜索叔难以满足复杂的应用场景。</p><p>这样以来，一个高度可控的多路搜索树 —- B+树应运而生。</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203241644738.jpeg" alt="b+树"></p><p>如图所示，如果要查找某个值，首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分法查找锁定一个指针，内存时间可以忽略不计，通过磁盘1的某指针，把第二层中某个磁盘块（也就是磁盘2、3、4中某个磁盘块）加载到内存，发生第二次IO，继续锁定某个指针指向第三层，把第三层某个磁盘加载到内存，总计需要三次IO。</p><h4 id="一棵三层的B-树能放多少条数据呢？"><a href="#一棵三层的B-树能放多少条数据呢？" class="headerlink" title="一棵三层的B+树能放多少条数据呢？"></a>一棵三层的B+树能放多少条数据呢？</h4><p>约2千万。</p><p>在计算机中磁盘存储数据最小单元是&#x3D;&#x3D;扇区&#x3D;&#x3D;，一个扇区的大小是&#x3D;&#x3D;512字节&#x3D;&#x3D;，而文件系统中最小单元是块，一个块的大小是4k，而对于我们的InnoDB存储引擎也有自己的最小存储单元 – 页(Page), 其大小为16K</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203242053063.png" alt="image-20220324205328029"></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203242053731.png" alt="image-20220324205343701"></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203242054707.png" alt="image-20220324205402679"></p><p>  通过以上三个图, 我们就可以了解到, 占用磁盘的空间与文件大小不是完全相等的，都是4K的倍数。而Innodb的所有数据文件，大小都是16K的整数倍。磁盘扇区、文件系统、InnoDB存储引擎都有各自的最小存储单元。在MySQL中我们的InnoDB页的大小默认是16K（当然可以通过参数修改）</p><p>  数据表中的数据都是存储在页中的，那一个页可以存储多少行数据呢？假设一行记录的数据大小为1k，那么**&#x3D;&#x3D;单个叶子节点&#x3D;&#x3D;<strong>（页）中的记录数就是16。</strong>非叶子节点*<em>能存放多少指针呢？假设主键为BigInt类型，长度为8bytes，而指针大小在InnoDB中设置为6Bytes，也就是一共14字节 16384&#x2F;14 &#x3D; 1170 那么也就是一棵高度为2的B+树，能存放1170</em>16&#x3D;18720条这样的数据记录。</p><p>  同样，我们可以算出高度为3的B+树可以存放：$1170<em>1170</em>16&#x3D;21902400$，也就是约2000万条数据, 所以在InnoDB中 B+树高度一般为1~3层, 就能满足千万级的数据存储。在查找数据时，一次页的查找代表一次IO，所以通过主键索引查询通常只需要1 ~ 3次IO操作即可查找到数据。</p><p><strong>性质</strong></p><ol><li><strong>IO次数</strong>取决于b+树的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有 $h&#x3D;log_{(m+1)}N$, 当数据量N一定的情况下，m越大，h越小； 而m&#x3D;磁盘块的大小&#x2F;数据项的大小，<strong>磁盘块的大小</strong>也就是数据页的大小，<strong>是固定的</strong>，如果<strong>数据项占的空间越小</strong>，数据项的数量越多，<strong>树的高度就越低</strong>。因此：<ul><li>B+树要求每个数据项也就是索引字段要尽量的小</li><li>B+树要求把真实的数据放到叶子节点，而不是内层节点。一旦真实数据放到内层节点，磁盘快的数据项会大幅度下降，导致树增高。</li></ul></li><li>当B+树的数据项是复合的数据结构，像（name、sex、age）的时候，B+树是按照从左到右的顺序来建立搜索树的，即<strong>索引的最左匹配特性</strong><ul><li>当（张三、20、F）这样的数据来检索的时候，B+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较sex和age，最后得到检索的数据。</li><li>当（20，F）这样的没有name的数据来的时候，B+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。</li><li>当（张三，F）这样的数据来检索的时候，B+树可以用name来指定搜索方向，但age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据。</li></ul></li></ol><p>原则</p><ol><li>最左前缀匹配原则</li><li>&#x3D;和in可以乱序</li><li>尽量选择区分度高的列作为索引</li><li>索引列不能参与计算，保持列“干净”</li><li>尽量的拓展索引，不要新建索引</li></ol><h3 id="慢查询以及优化"><a href="#慢查询以及优化" class="headerlink" title="慢查询以及优化"></a>慢查询以及优化</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol start="0"><li><p>先运行看看是否真的很慢，注意设置SQL_NO_CACHE</p></li><li><p>where 条件单表查，锁定最小返回记录表 。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</p></li><li><p>explain 查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251724816.png" alt="image-20220325172439754"></p></li><li><p>order by limit 形式的sql语句让排序的表优先查</p></li><li><p>了解业务方使用场景</p></li><li><p>加索引时参照建索引的几大原则</p></li><li><p>观察结果，不符合预期继续从0分析</p></li></ol><h4 id="explain命令"><a href="#explain命令" class="headerlink" title="explain命令"></a>explain命令</h4><p>该explain语句提供有关MySQL如何执行语句的信息。以下是常见字段：</p><p><strong>select_type ：</strong></p><ul><li>simple：不使用Union或子查询等</li><li>primary：若包含任何复杂的子部分，最外层的select被标记为PRIMARY</li><li>UNION：Union中的第二个或后面的select语句</li><li>subquery：在select或where 列表中包含了子查询</li><li>…</li></ul><p><strong>type：</strong></p><blockquote><p> type表示MySQL在表中找到所需行的方式，又称“访问类型”，常用的类型有：</p><p>ALL, index, range, ref, eq_ref, const, system, NULL。</p><p>从左到右，性能越来越好。</p></blockquote><ul><li><strong>ALL：</strong><br>Full Table Scan，MySQL将<strong>遍历全表</strong>以找到匹配的行。</li><li><strong>index</strong>:<br>Full Index Scan，index与ALL区别为index类型<strong>只遍历索引树</strong>。</li><li><strong>range:</strong><br>只检索给定范围的行，<strong>使用一个索引来选择行</strong>。</li><li>…</li></ul><p><strong>partitions:</strong></p><blockquote><p>表所使用的分区，如果要统计十年公司订单的金额，可以把数据分为十个区，每一年代表一个区。这样可以大大的提高查询效率。</p></blockquote><blockquote><h3 id="几个慢查询案例"><a href="#几个慢查询案例" class="headerlink" title="几个慢查询案例"></a>几个慢查询案例</h3><p>下面几个例子详细解释了如何分析和优化慢查询。</p><h4 id="复杂语句写法"><a href="#复杂语句写法" class="headerlink" title="复杂语句写法"></a>复杂语句写法</h4><p>很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   <span class="keyword">distinct</span> cert.emp_id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   (</span><br><span class="line">      <span class="keyword">select</span></span><br><span class="line">         emp.id <span class="keyword">as</span> emp_id,</span><br><span class="line">         emp_cert.id <span class="keyword">as</span> cert_id </span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">         employee emp </span><br><span class="line">      <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">         emp_certificate emp_cert </span><br><span class="line">            <span class="keyword">on</span> emp.id <span class="operator">=</span> emp_cert.emp_id </span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">         emp.is_deleted<span class="operator">=</span><span class="number">0</span></span><br><span class="line">   ) cert </span><br><span class="line">      <span class="keyword">on</span> (</span><br><span class="line">         cl.ref_table<span class="operator">=</span><span class="string">&#x27;Employee&#x27;</span> </span><br><span class="line">         <span class="keyword">and</span> cl.ref_oid<span class="operator">=</span> cert.emp_id</span><br><span class="line">      ) </span><br><span class="line">      <span class="keyword">or</span> (</span><br><span class="line">         cl.ref_table<span class="operator">=</span><span class="string">&#x27;EmpCertificate&#x27;</span> </span><br><span class="line">         <span class="keyword">and</span> cl.ref_oid<span class="operator">=</span> cert.cert_id</span><br><span class="line">      ) </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date <span class="operator">&gt;=</span><span class="string">&#x27;2013-11-07 15:03:00&#x27;</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date<span class="operator">&lt;=</span><span class="string">&#x27;2013-11-08 16:00:00&#x27;</span>;</span><br></pre></td></tr></table></figure><p>0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">53</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.87</span> sec)</span><br></pre></td></tr></table></figure><p>1.explain</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251731920.png" alt="image-20220325173155828"></p><p>简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID &#x3D; 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID &#x3D; 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows &#x3D; 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。</p><p>如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。</p><p>优化过的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   emp.id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   employee emp </span><br><span class="line">      <span class="keyword">on</span> cl.ref_table <span class="operator">=</span> <span class="string">&#x27;Employee&#x27;</span> </span><br><span class="line">      <span class="keyword">and</span> cl.ref_oid <span class="operator">=</span> emp.id  </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date <span class="operator">&gt;=</span><span class="string">&#x27;2013-11-07 15:03:00&#x27;</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date<span class="operator">&lt;=</span><span class="string">&#x27;2013-11-08 16:00:00&#x27;</span> </span><br><span class="line">   <span class="keyword">and</span> emp.is_deleted <span class="operator">=</span> <span class="number">0</span>  </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">   emp.id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   emp_certificate ec </span><br><span class="line">      <span class="keyword">on</span> cl.ref_table <span class="operator">=</span> <span class="string">&#x27;EmpCertificate&#x27;</span> </span><br><span class="line">      <span class="keyword">and</span> cl.ref_oid <span class="operator">=</span> ec.id  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   employee emp </span><br><span class="line">      <span class="keyword">on</span> emp.id <span class="operator">=</span> ec.emp_id  </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date <span class="operator">&gt;=</span><span class="string">&#x27;2013-11-07 15:03:00&#x27;</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date<span class="operator">&lt;=</span><span class="string">&#x27;2013-11-08 16:00:00&#x27;</span> </span><br><span class="line">   <span class="keyword">and</span> emp.is_deleted <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致</p><p>5.现有索引可以满足，不需要建索引</p><p>6.用改造后的语句实验一下，只需要10ms 降低了近200倍！</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251731923.png" alt="image-20220325173114832"></p><h4 id="明确应用场景"><a href="#明确应用场景" class="headerlink" title="明确应用场景"></a>明确应用场景</h4><p>举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   stage_poi sp </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   sp.accurate_result<span class="operator">=</span><span class="number">1</span> </span><br><span class="line">   <span class="keyword">and</span> (</span><br><span class="line">      sp.sync_status<span class="operator">=</span><span class="number">0</span> </span><br><span class="line">      <span class="keyword">or</span> sp.sync_status<span class="operator">=</span><span class="number">2</span> </span><br><span class="line">      <span class="keyword">or</span> sp.sync_status<span class="operator">=</span><span class="number">4</span></span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p>0.先看看运行多长时间,951条数据6.22秒，真的很慢。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">951</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">6.22</span> sec)</span><br></pre></td></tr></table></figure><p>1.先explain，rows达到了361万，type &#x3D; ALL表明是全表扫描。</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251732054.png" alt="image-20220325173230969"></p><p>2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条。</p><p>3.让explain的rows 尽量逼近951。</p><p>看一下accurate_result &#x3D; 1的记录数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),accurate_result <span class="keyword">from</span> stage_poi  <span class="keyword">group</span> <span class="keyword">by</span> accurate_result;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span> accurate_result <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1023</span> <span class="operator">|</span>              <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2114655</span> <span class="operator">|</span>               <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">972815</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------+</span></span><br></pre></td></tr></table></figure><p>我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据。</p><p>再看一下sync_status字段的情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),sync_status <span class="keyword">from</span> stage_poi  <span class="keyword">group</span> <span class="keyword">by</span> sync_status;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span> sync_status <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">3080</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3085413</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+</span></span><br></pre></td></tr></table></figure><p>同样的区分度也很低，根据理论，也不适合建立索引。</p><p>问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的。</p><p>4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据。</p><p>5.根据建立索引规则，使用如下语句建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stage_poi <span class="keyword">add</span> index idx_acc_status(accurate_result,sync_status);</span><br></pre></td></tr></table></figure><p>6.观察预期结果,发现只需要200ms，快了30多倍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">952</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.20</span> sec)</span><br></pre></td></tr></table></figure><p>我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。</p><h4 id="无法优化的语句"><a href="#无法优化的语句" class="headerlink" title="无法优化的语句"></a>无法优化的语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) <span class="keyword">as</span> created_time,</span><br><span class="line">   from_unixtime(c.last_modified) <span class="keyword">as</span> last_modified,</span><br><span class="line">   c.last_modified_user_id  </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   contact c  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   contact_branch cb </span><br><span class="line">      <span class="keyword">on</span>  c.id <span class="operator">=</span> cb.contact_id  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   branch_user bu </span><br><span class="line">      <span class="keyword">on</span>  cb.branch_id <span class="operator">=</span> bu.branch_id </span><br><span class="line">      <span class="keyword">and</span> bu.status <span class="keyword">in</span> (</span><br><span class="line">         <span class="number">1</span>,</span><br><span class="line">      <span class="number">2</span>)  </span><br><span class="line">   <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">      org_emp_info oei </span><br><span class="line">         <span class="keyword">on</span>  oei.data_id <span class="operator">=</span> bu.user_id </span><br><span class="line">         <span class="keyword">and</span> oei.node_left <span class="operator">&gt;=</span> <span class="number">2875</span> </span><br><span class="line">         <span class="keyword">and</span> oei.node_right <span class="operator">&lt;=</span> <span class="number">10802</span> </span><br><span class="line">         <span class="keyword">and</span> oei.org_category <span class="operator">=</span> <span class="operator">-</span> <span class="number">1</span>  </span><br><span class="line">   <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">      c.created_time <span class="keyword">desc</span>  limit <span class="number">0</span> ,</span><br><span class="line">      <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>还是几个步骤。</p><p>0.先看语句运行多长时间，10条记录用了13秒，已经不可忍受。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">13.06</span> sec)</span><br></pre></td></tr></table></figure><p>1.explain</p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251732591.png" alt="image-20220325173254493"></p><p>从执行计划上看，mysql先查org_emp_info表扫描8849记录，再用索引idx_userid_status关联branch_user表，再用索引idx_branch_id关联contact_branch表，最后主键关联contact表。</p><p>rows返回的都非常少，看不到有什么异常情况。我们在看一下语句，发现后面有order by + limit组合，会不会是排序量太大搞的？于是我们简化SQL，去掉后面的order by 和 limit，看看到底用了多少记录来排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   contact c  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   contact_branch cb </span><br><span class="line">      <span class="keyword">on</span>  c.id <span class="operator">=</span> cb.contact_id  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   branch_user bu </span><br><span class="line">      <span class="keyword">on</span>  cb.branch_id <span class="operator">=</span> bu.branch_id </span><br><span class="line">      <span class="keyword">and</span> bu.status <span class="keyword">in</span> (</span><br><span class="line">         <span class="number">1</span>,</span><br><span class="line">      <span class="number">2</span>)  </span><br><span class="line">   <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">      org_emp_info oei </span><br><span class="line">         <span class="keyword">on</span>  oei.data_id <span class="operator">=</span> bu.user_id </span><br><span class="line">         <span class="keyword">and</span> oei.node_left <span class="operator">&gt;=</span> <span class="number">2875</span> </span><br><span class="line">         <span class="keyword">and</span> oei.node_right <span class="operator">&lt;=</span> <span class="number">10802</span> </span><br><span class="line">         <span class="keyword">and</span> oei.org_category <span class="operator">=</span> <span class="operator">-</span> <span class="number">1</span>  </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">778878</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">5.19</span> sec)</span><br></pre></td></tr></table></figure><p>发现排序之前居然锁定了778878条记录，如果针对70万的结果集排序，将是灾难性的，怪不得这么慢，那我们能不能换个思路，先根据contact的created_time排序，再来join会不会比较快呢？</p><p>于是改造成下面的语句，也可以用straight_join来优化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) as created_time,</span><br><span class="line">   from_unixtime(c.last_modified) as last_modified,</span><br><span class="line">   c.last_modified_user_id   </span><br><span class="line">from</span><br><span class="line">   contact c  </span><br><span class="line">where</span><br><span class="line">   exists (</span><br><span class="line">      select</span><br><span class="line">         1 </span><br><span class="line">      from</span><br><span class="line">         contact_branch cb  </span><br><span class="line">      inner join</span><br><span class="line">         branch_user bu        </span><br><span class="line">            on  cb.branch_id = bu.branch_id        </span><br><span class="line">            and bu.status in (</span><br><span class="line">               1,</span><br><span class="line">            2)      </span><br><span class="line">         inner join</span><br><span class="line">            org_emp_info oei           </span><br><span class="line">               on  oei.data_id = bu.user_id           </span><br><span class="line">               and oei.node_left &gt;= 2875           </span><br><span class="line">               and oei.node_right &lt;= 10802           </span><br><span class="line">               and oei.org_category = - 1      </span><br><span class="line">         where</span><br><span class="line">            c.id = cb.contact_id    </span><br><span class="line">      )    </span><br><span class="line">   order by</span><br><span class="line">      c.created_time desc  limit 0 ,</span><br><span class="line">      10;</span><br></pre></td></tr></table></figure><p>验证一下效果 预计在1ms内，提升了13000多倍！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>本以为至此大工告成，但我们在前面的分析中漏了一个细节，先排序再join和先join再排序理论上开销是一样的，为何提升这么多是因为有一个limit！大致执行过程是：mysql先按索引排序得到前10条记录，然后再去join过滤，当发现不够10条的时候，再次去10条，再次join，这显然在内层join过滤的数据非常多的时候，将是灾难的，极端情况，内层一条数据都找不到，mysql还傻乎乎的每次取10条，几乎遍历了这个数据表！</p><p>用不同参数的SQL试验下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   sql_no_cache   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) <span class="keyword">as</span> created_time,</span><br><span class="line">   from_unixtime(c.last_modified) <span class="keyword">as</span> last_modified,</span><br><span class="line">   c.last_modified_user_id    </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   contact c   </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   <span class="keyword">exists</span> (</span><br><span class="line">      <span class="keyword">select</span></span><br><span class="line">         <span class="number">1</span>        </span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">         contact_branch cb         </span><br><span class="line">      <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">         branch_user bu                     </span><br><span class="line">            <span class="keyword">on</span>  cb.branch_id <span class="operator">=</span> bu.branch_id                     </span><br><span class="line">            <span class="keyword">and</span> bu.status <span class="keyword">in</span> (</span><br><span class="line">               <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>)                </span><br><span class="line">         <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">            org_emp_info oei                           </span><br><span class="line">               <span class="keyword">on</span>  oei.data_id <span class="operator">=</span> bu.user_id                           </span><br><span class="line">               <span class="keyword">and</span> oei.node_left <span class="operator">&gt;=</span> <span class="number">2875</span>                           </span><br><span class="line">               <span class="keyword">and</span> oei.node_right <span class="operator">&lt;=</span> <span class="number">2875</span>                           </span><br><span class="line">               <span class="keyword">and</span> oei.org_category <span class="operator">=</span> <span class="operator">-</span> <span class="number">1</span>                </span><br><span class="line">         <span class="keyword">where</span></span><br><span class="line">            c.id <span class="operator">=</span> cb.contact_id           </span><br><span class="line">      )        </span><br><span class="line">   <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">      c.created_time <span class="keyword">desc</span>  limit <span class="number">0</span> ,</span><br><span class="line">      <span class="number">10</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">2</span> min <span class="number">18.99</span> sec)</span><br></pre></td></tr></table></figure><p>2 min 18.99 sec！比之前的情况还糟糕很多。由于mysql的nested loop机制，遇到这种情况，基本是无法优化的。这条语句最终也只能交给应用系统去优化自己的逻辑了。</p><p>通过这个例子我们可以看到，并不是所有语句都能优化，而往往我们优化时，由于SQL用例回归时落掉一些极端情况，会造成比原来还严重的后果。所以，第一：不要指望所有语句都能通过SQL优化，第二：不要过于自信，只针对具体case来优化，而忽略了更复杂的情况。</p><p>慢查询的案例就分析到这儿，以上只是一些比较典型的案例。我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。</p></blockquote><h3 id="导入数据测试"><a href="#导入数据测试" class="headerlink" title="导入数据测试"></a>导入数据测试</h3><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251711778.png" alt="image-20220325171123713"></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251711607.png" alt="image-20220325171154514"></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203251712126.png" alt="image-20220325171216037"></p><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者考研在web应用程序中实现定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ol><li>美团技术团队 MySQL索引原理及慢查询优化 <a href="https://tech.meituan.com/2014/06/30/mysql-index.html">https://tech.meituan.com/2014/06/30/mysql-index.html</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之SQL篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之SQL篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识之SQL</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="SQL" scheme="https://codeink.gitee.io/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之前端基础</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T08:35:47.527Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="HTML-x2F-CSS"><a href="#HTML-x2F-CSS" class="headerlink" title="HTML&#x2F;CSS"></a>HTML&#x2F;CSS</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><strong>选择器：</strong></p><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><blockquote><p> DOM（文档对象模型 Document Object Model）</p><p>通过HTML DOM，可访问JavaScript HTML文档的所有元素。当网页被加载时，浏览器会创建页面的文档对象模型（DOM）</p></blockquote><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203160001238.gif" alt="DOM HTML tree"></p><p><strong>查找HTML元素：</strong></p><ul><li><p>通过id查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过标签名查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);;</span><br><span class="line">  <span class="keyword">var</span> y = x.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">- 通过类名查找</span><br><span class="line"></span><br><span class="line">  <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">  document.getElementsByClassName(&quot;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**改变HTML**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 改变输出流</span></span><br><span class="line"><span class="string">- 改变内容</span></span><br><span class="line"><span class="string">- 改变属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**改变CSS**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 改变样式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>javascript</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;&quot;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用事件</p><p>HTML DOM允许我们通过触发事件来执行代码，如：</p><ul><li>元素被点击</li><li>页面加载完成</li><li>输入框被修改</li></ul></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript 是Web的编程语言， 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web。</p><h3 id="Cookie和session"><a href="#Cookie和session" class="headerlink" title="Cookie和session"></a>Cookie和session</h3><p><strong>Cookie</strong>实际上是一小段的文本信息 而<strong>Session</strong>也是一种记录客户状态的机制。</p><p>step1  客户端请求服务器 , 如果服务器需要记录该用户的状态 , 就是用response向客户端浏览器颁发一个cookie . </p><p>step2  客户端浏览器会把cookie保存起来，当浏览器再次请求该网站时，浏览器就会把请求地址和cookie一同发给服务器。</p><p>step3  服务器检查该cookie，从而判断用户的状态，服务器还可以根据需要修改Cookie的内容。</p><p>step1  客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。</p><p>step2  客户端再次访问的时候只需要从该session中查找该客户的状态就可以了。</p><p>综上：Cookie是客户访问某特定网站时的“通行证”， Session则是服务器上的客户明细表。</p><table><thead><tr><th align="center"></th><th align="left">cookie</th><th align="left">session</th></tr></thead><tbody><tr><td align="center">位置</td><td align="left">客户端浏览器</td><td align="left">服务器</td></tr><tr><td align="center">理解</td><td align="left">客户访问某特定网站时的“通行证”</td><td align="left">服务器上的客户明细表</td></tr><tr><td align="center">特征</td><td align="left">针对特定网站起作用；有生命期限</td><td align="left">针对客户起作用；通过Cookie中的 session Id来判断是否是新面孔</td></tr><tr><td align="center">缺点</td><td align="left">数据可以在客户端被修改，如果数据太多会影响传输效率</td><td align="left"></td></tr></tbody></table><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><blockquote><p>jQuery 是一个<strong>JavaScript 库</strong>,  它极大地<strong>简化了JavaScript编程</strong>。它包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>Ajax</li></ul></blockquote><p><strong>jQuery 基础</strong></p><p><strong>jQuery语法</strong></p><blockquote><p> jQuery语法是通过选取HTML元素,并对选取的元素执行某些操作.</p></blockquote><p>基础语法：$(selector).action()</p><p><strong>jQuery选择器</strong></p><blockquote></blockquote><p>jQuery事件</p><blockquote></blockquote><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p>JSP与php、asp、asp.net等语言类似，运行在服务端的语言。JSP（全称Java Server Pages）是由Sun Micro systems公司倡导和许多公司参与共同创建的使软件开发者考研相应客户端请求，而动态的生成HTML、XML或其他格式文档的Web网页的技术标准。</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ul><li><p>静态引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li>静态引入是指把两个页面翻译成Servlet的过程中进行合并</li><li>静态引入的jsp文件中<strong>不能</strong>包含同名变量</li></ul></li><li><p>动态引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;&quot;</span> &gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><ul><li>动态引入是指在Servlet的运行过程中, 通过代码引入另一个页面</li></ul></li><li><p>可以有同名变量</p></li></ul><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><ul><li><p>跨域问题</p><p>​当一个请求的URL的<strong>协议、域名、端口</strong>之间的<strong>任意一个</strong>与当前页面不同即为跨域。</p></li><li><p>跨域问题的由来</p></li></ul><p>​出于浏览器的同源策略限制</p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>前后端分离就是将一个应用拆成两个，前端应用和后端应用以JSON格式进行交互。</p><h4 id="对于后端工程师和前端工程"><a href="#对于后端工程师和前端工程" class="headerlink" title="对于后端工程师和前端工程"></a>对于后端工程师和前端工程</h4><p><strong>对于后端工程师：</strong></p><p>主要精力在java基础、设计模式、JVM原理，Linux、MySQL事务隔离与锁机制，MongoDB、多线程、分步式架构、微服务架构java性能优化等</p><p>后端追求的是：<strong>三高（高并发、高可用、高性能），安全，存储，业务</strong>等等。</p><p><strong>对于前端工程师：</strong></p><p>主要精力在Html、CSS、JavaScript、jQuery、react、bootstrap、Vue、less&#x2F;sass, Node.js 模块化、设计模式、性能优化等</p><p>前端追求的是：<strong>页面表现，速度流畅，兼容性，用户体验</strong>等等。</p><p><strong>JSP的痛点：</strong></p><p>- </p><ul><li>动态资源和静态资源全部耦合在一起，服务器压力大，因为服务器会收到各种HTTP请求，例如CSS、JS、图片等等。</li><li>JSP必须要在支持java的web服务器中运行（例如Tomcat、jetty、resin等），无法使用 Nginx等并发性高的服务器</li><li>第一次请求jsp，必须要在web服务器中编译成servlet，第一次运行会较慢。</li><li>每次请求jsp都是访问servlet再用输出流输出为页面，效率没有直接使用Html高</li></ul><h4 id="JSON-和-XML"><a href="#JSON-和-XML" class="headerlink" title="JSON 和 XML"></a>JSON 和 XML</h4><ul><li><p>XML（Extensible Markup Language）</p><p><strong>定义</strong>：使用DTD（document type definition）文档类型定义来组织数据，格式统一，跨平台和语言，早已成为业界公认的标准。</p></li><li><p>JSON（JavaScript Object Natation）</p><p><strong>定义：</strong>一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。兼容性很高，完全独立于语言文本格式。</p></li></ul><table><thead><tr><th></th><th>XML</th><th>JSON</th></tr></thead><tbody><tr><td>可读性</td><td>规范的标签形式（可读性好）</td><td>建议的语法</td></tr><tr><td>可拓展性</td><td>很好的拓展性</td><td>很好</td></tr><tr><td>编码难度</td><td>不太容易</td><td>不借助工具，也能写出JSON</td></tr><tr><td>解码难度</td><td>要考虑子节点、父节点</td><td>简单</td></tr><tr><td>流行度</td><td>广泛使用</td><td>在Ajax领域流行</td></tr><tr><td>数据体积</td><td></td><td>数据体积小，传递速度快</td></tr><tr><td>数据交互</td><td></td><td>与JS交互方便，更容易解析</td></tr></tbody></table><h3 id="动静页面"><a href="#动静页面" class="headerlink" title="动静页面"></a>动静页面</h3><ul><li><p>静态页面</p><p>在静态Web程序中，客户端使用web浏览器经过网络连接到服务器上，使用HTTP协议发起一个请求，告诉服务器现在需要哪个页面，所有的请求交给Web服务器，之后Web服务器根据用户的需要，从文件系统取出内容。之后通过web服务器返回给客户端，客户端接收到内容后进行浏览器渲染解析，得到显示的效果</p><p>为了让静态web页面更加好看，使用JavaScript&#x2F;ajax(Asynchronous JavaScript和XML) , 是指一种创建交互式网页应用的网页开发技术 ,  但是这些特效都是在客户端上借助于浏览器展现给用户的 , 所以在服务器上本身并没有任何的变化</p><p>静态web无法连接数据库，开发技术一般指&#x3D;&#x3D;HTML&#x3D;&#x3D;， 大量的JS导致现在的浏览器打开页面就会占用大量的内存，压力从服务器转移到了客户端。</p></li><li><p>动态页面</p><p>  程序使用客户端和服务端，客户端依然使用浏览器，通过网络连接到服务器上，使用HTTP协议发起请求，现在的所有请求都先经过一个Web Server 来处理。</p><p>  如果客户端请求的是<strong>动态资源</strong>（jsp、php、asp），则先将请求转交给Web Container（<strong>web容器</strong>），在web Container中<strong>连接数据库</strong>，从数据库中取出数据等一系列操作后<strong>动态拼凑页面的展示内容，</strong>拼凑页面的展示内容后，把所有的展示内容交给Web服务器，之后通过Web服务器将内容发送回客户端浏览器进行解析执行。</p><p>  浏览器访问web时，看似是直接访问的jsp页面，其实是最先到达的地方是服务器，<strong>服务器创建好rep和resp对象后再给jsp页面使用</strong>。在jsp中完成是指字符集和取得表单参数后在调用servlet，完成业务处理。然后</p><p>  ​</p></li></ul><p></p><h2 id="Develop-tools"><a href="#Develop-tools" class="headerlink" title="Develop tools"></a>Develop tools</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sleep</span> = <span class="keyword">async</span> (<span class="params">duration</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, duration);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">24</span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.preview&quot;</span>)[i].<span class="title function_">click</span>();</span><br><span class="line">    i++; </span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">5000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="双向绑定："><a href="#双向绑定：" class="headerlink" title="双向绑定："></a>双向绑定：</h3><h3 id="组件通信（）"><a href="#组件通信（）" class="headerlink" title="组件通信（）"></a>组件通信（）</h3><ul><li>通过Prop向子组件传递数据</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>每个<strong>Vue组件实例</strong>在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到DOM以及数据改变时更新DOM。在此过程中，它也会运行成为生命周期钩子的函数，让开发者有机会在特定阶段添加自己的代码。</p><ul><li><p>创建Vue实例</p><p>初始化data, 加载el</p></li><li><p>数据挂载</p><p>将vue实例data中的数据渲染到HTML网页</p></li><li><p>重新渲染</p><p>当Vue的data数据发生变化, 会重新渲染到html</p></li><li><p>销毁实例</p></li></ul><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203152345705.png" alt="lifecycle.16e4c08e" style="zoom: 40%;" /><blockquote><p>共有14个阶段，</p><ul><li><p>beforeCreate</p><p>​实例被初始化的时候被调用</p></li><li><p>created</p></li></ul><p>​在实例处理完所有与状态相关的选项后调用。</p><ul><li>beforeMount</li></ul><p>​在组件挂载之前调用。</p><ul><li>mounted</li></ul><p>​组件挂载后调用。</p><ul><li>beforeUpdate</li></ul><p>​在组件因为响应性状态改变而要更新DOM树之前调用。</p><ul><li>updated</li></ul><p>​由于响应性状态更改，组件更新了它的DOM树后调用。</p><ul><li>beforeUnmount</li></ul><p>​在卸载组件实例之前调用。</p><ul><li>unmounted</li></ul><p>​组件卸载后调用。</p><ul><li>errorCaptured</li></ul><p>​当捕获了从派生组件传播的错误时调用。</p><ul><li>renderTracked</li></ul><p>​当组件的呈现效果跟踪响应性依赖时调用。</p><ul><li>renderTriggered</li></ul><p>​当响应性依赖触发组件的呈现效果重新运行时调用。</p><ul><li>activated</li></ul><p>​组件实例作为<KeepAlive>缓存的树的一部分插入到DOM后调用。</p><ul><li>deactivated</li></ul><p>​组件实例作为<KeepAlive>缓存的树的一部分从DOM中移除后调用。</p><ul><li>serverPrefetch</li></ul><p>​在组件实例在服务器上呈现之前解析的异步函数。</p></blockquote><h3 id="离谱的问题："><a href="#离谱的问题：" class="headerlink" title="离谱的问题："></a>离谱的问题：</h3><ul><li><p>style+template</p><p>会更好</p></li><li><p>template</p><p>会延迟</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;前端基础&quot;&gt;&lt;a href=&quot;#前端基础&quot; class=&quot;headerlink&quot; title=&quot;前端基础&quot;&gt;&lt;/a&gt;前端基础&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Web前端" scheme="https://codeink.gitee.io/blog/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识之数据结构与算法篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T03:43:33.234Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之数据结构与算法篇"><a href="#程序猿基础知识之数据结构与算法篇" class="headerlink" title="程序猿基础知识之数据结构与算法篇"></a>程序猿基础知识之数据结构与算法篇</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>前根遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">                res.add(node.val);</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node=node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中根遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();                </span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后根遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();                </span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">          <span class="comment">// 遍历当前节点的左子树</span></span><br><span class="line">            <span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="comment">// 判断当前的右子树是否为空, 以及是否被遍历过</span></span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="literal">null</span> || root.right == prev)&#123;</span><br><span class="line">                res.add(root.val);</span><br><span class="line">                prev = root;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果右子树不为空或没被遍历过,就将当前的节点放回栈中 </span></span><br><span class="line">            <span class="comment">// 并将当前的右子树赋给 root </span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是一种树数据结构，通常用于<strong>数据库和操作系统的文件系统中</strong>。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+树元素自底向上插入，这与二叉树恰好相反。</p><p>B+树在节点访问时间远远超过节点内部访问时间的时候，比可以作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个内部节点内的子节点的数目减少树的高度，平衡操作不经常发生，而且效率增加了。</p><p>B+背后的想法是内部节点可以有在预定范围内的可变量目的子节点。因此，B+树不需要像其他自平衡树那样经常的重新平衡，对于特定的实现在子节点数目上的底和高边界时固定的。</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul><li><p>查找</p></li><li><p>插入</p></li><li><p>删除</p></li></ul><h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</a></p><p><img src="https://gitee.com/codeInk/mypicgo/raw/master/img/202203250118802.png" alt="img"></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是一种简单直观的排序算法，它重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p><strong>步骤</strong>（小 –&gt; 大）：</p><ul><li>比较相邻的元素，如果第一个比第二个大，就交换它们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完之后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><p><strong>java实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] bubbleSort (<span class="type">int</span>[] source) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = Arrays.copyOf(source,source.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此次循环没有进行交换,则数组已经有序</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><strong>步骤</strong></p><ul><li>从数组中挑出一个元素, 称为”pivit”</li></ul><p><strong>java实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之数据结构与算法篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之数据结构与算法篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://codeink.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>程序猿基础知识 计算机网络篇</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T03:39:07.234Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。</p><h1 id="程序猿基础知识之计算机网络篇"><a href="#程序猿基础知识之计算机网络篇" class="headerlink" title="程序猿基础知识之计算机网络篇"></a>程序猿基础知识之计算机网络篇</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序猿基础知识汇总，包括Java基础、SQL基础、前端基础、基础算法以及计算机网络等基础知识汇总。&lt;/p&gt;
&lt;h1 id=&quot;程序猿基础知识之计算机网络篇&quot;&gt;&lt;a href=&quot;#程序猿基础知识之计算机网络篇&quot; class=&quot;headerlink&quot; title=&quot;程序猿基础知识</summary>
      
    
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="计算机网络" scheme="https://codeink.gitee.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/"/>
    <id>https://codeink.gitee.io/blog/2022/03/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-06-03T03:41:07.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>活动图</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><a href="https://refactoringguru.cn/design-patterns">https://refactoringguru.cn/design-patterns</a></p><p>学习设计模式是个人技术能力提高的捷径，其中包含了面向对象的精髓，懂了设计模式，就懂了面向对象分析和设计的精要</p><p>“设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。1987年，肯特 · 贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将建筑领域的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。</p><p>1994 年，艾瑞克·伽马（Erich Gamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 <strong>23 个设计模式</strong>，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，<strong>GoF</strong>）匿名著称。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>  软件设计模式又称设计模式，是指在软件开发中，经过验证的，用于解决在特定环境下、重复出现的、特定问题的解决方案。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：</p><ul><li>可以提高程序员的思维能力，编程能力和设计能力</li><li>使程序设计更加标准化，代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期</li></ul><h4 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h4><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>根据目的来分</strong></p><ul><li><p>创建型模式</p></li><li><p>结构型模式</p></li><li><p>行为型模式</p></li></ul><p><strong>根据作用范围来分</strong></p><ul><li>类模式</li><li>对象模式</li></ul><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>这类模式提供创建对象的机制，能够提升已有代码的灵活性和可复用性</p><h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>  工厂方法是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p><p>  这种方式仿佛只是，改变了程序中调用构造函数的位置；但是，仔细想一下，现在你可以在子类中重写工厂方法，从而改变其创建产品的类型。</p><p>模式结构：</p><ol><li><strong>产品：</strong>将会对接口进行声明，<strong>对于所有</strong>由创建者及其子类构建的<strong>对象</strong>，这些<strong>接口都是通用</strong>的。</li><li><strong>具体产品：</strong>是产品接口的不同实现</li><li><strong>创建者：</strong> 声明返回产品对象的工厂方法。该方法的返回对象类型必须与产品接口相匹配。</li><li><strong>具体创建者：</strong>将会重写基础工厂方法，使其返回不同类型的产品。</li></ol><h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p><strong>原型模式</strong>是一种创建型设计模式，使你能够复制已有对象，而又无需使代码依赖它们所属的类。</p><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><p><strong>单例模式</strong>是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p><ul><li><p><strong>目的：</strong>保证一个类只有一个实例，最常见的原因是控制某些<strong>共享资源（例如数据库或文件）</strong>的访问权限。它的运作方式是这样的：如果你创建了一个对象，同时过一会儿后你决定再创建一个新对象，此时你会获得之前已创建的对象，而不是一个新对象。</p></li><li><p><strong>为该实例提供一个全局访问节点。</strong> </p></li><li><p>方法：</p><ul><li>将默认构造函数设为私有，防止其他对象使用单例类的<code>new</code>运算符。</li><li>新建一个静态构建方法作为构造函数。该函数会“偷偷”调用私有构造函数来创建对象，并将其保存在一个静态成员变量中。此后所有对于该函数的调用都将返回这一缓存对象。</li></ul></li><li><p>应用场景</p><ul><li>程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式</li><li>需要更加严格地控制全局变量，可以使用单例模式</li></ul></li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这类模式介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</p><h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><h4 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h4><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><h4 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h4><h4 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h4><h4 id="享元"><a href="#享元" class="headerlink" title="享元"></a>享元</h4><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><h3 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h3><p>这类模式负责对象间的高效沟通和职责委派。</p><h4 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h4><p>允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><h4 id="中介者"><a href="#中介者" class="headerlink" title="中介者"></a>中介者</h4><h4 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h4><h4 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h4><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><h4 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h4><h4 id="访问者"><a href="#访问者" class="headerlink" title="访问者"></a>访问者</h4><h3 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h</summary>
      
    
    
    
    <category term="软件工程" scheme="https://codeink.gitee.io/blog/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="技术" scheme="https://codeink.gitee.io/blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://codeink.gitee.io/blog/2022/01/01/hello-world/"/>
    <id>https://codeink.gitee.io/blog/2022/01/01/hello-world/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2022-06-03T08:38:01.626Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://s2.loli.net/2022/06/03/UIJlZTEqvV7jMrk.jpg" alt="202206030843904.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
